[{"path":"index.html","id":"read-quality-control","chapter":"IMAP-Part 04: Mastering Microbiome Read Quality","heading":"IMAP-Part 04: Mastering Microbiome Read Quality","text":"","code":""},{"path":"index.html","id":"welcome","chapter":"IMAP-Part 04: Mastering Microbiome Read Quality","heading":"Welcome","text":"Welcome microbiome data quality control (QC)! segment Practical User Guides series, venture another chapter, dedicated critical process “Read Quality Control” precision QC tools.Following successful acquisition sequencing reads Sequence Read Archive (SRA), journey now brings us pivotal phase – Quality Control (QC). chapter delves intricacies ensuring fidelity read data.","code":""},{"path":"toos-resources.html","id":"toos-resources","chapter":"1 Tools, Resources, and Environments","heading":"1 Tools, Resources, and Environments","text":"","code":""},{"path":"toos-resources.html","id":"essential-read-qc-tools","chapter":"1 Tools, Resources, and Environments","heading":"1.1 Essential Read QC tools","text":"SeqkitFastqcMultiQCBBDuk scriptTrimmomaticKneaddata","code":""},{"path":"toos-resources.html","id":"required-qc-resources","chapter":"1 Tools, Resources, and Environments","heading":"1.2 Required QC resources","text":"Adapter fasta filesPhiX fasta file","code":""},{"path":"toos-resources.html","id":"basic-yaml-file-for-read-qc-environment.yml","chapter":"1 Tools, Resources, and Environments","heading":"1.3 Basic YAML file for read QC (environment.yml)","text":"","code":"name: readqc\nchannels:\n    - bioconda\n    - biobakery\ndependencies:\n    - seqkit =2.3.1\n    - fastqc =0.12.1\n    - multiqc =1.14\n    - bbmap =39.01\n    - trimmomatic =0.39\n    - knead-data =0.12.0"},{"path":"toos-resources.html","id":"conda-environment","chapter":"1 Tools, Resources, and Environments","heading":"1.4 Creating an environment for QC","text":"","code":"conda activate base\nmamba install -c bioconda -c biobakery -c conda-forge -n readqc -file environment.yml"},{"path":"check-raw-reads-statistics.html","id":"check-raw-reads-statistics","chapter":"2 Check Raw Reads Statistics","heading":"2 Check Raw Reads Statistics","text":"Assuming QC tools ready, time use following:\nCheck quality reads using fastqc.\nCreate summary report quality metrics using multiqc.\nTrim poor read user-specified cutoff using bbduk.sh.\nRemove contaminants bbduk.sh.\nCheck quality reads using fastqc.Create summary report quality metrics using multiqc.Trim poor read user-specified cutoff using bbduk.sh.Remove contaminants bbduk.sh.","code":""},{"path":"check-raw-reads-statistics.html","id":"statistics-of-raw-reads","chapter":"2 Check Raw Reads Statistics","heading":"2.1 Statistics of raw reads","text":"","code":"#!/bin/bash\n\necho PROGRESS: Getting stats of the raw reads.\n\nINPUTDIR=\"resources/reads\"\nSEQKIT=\"results/qc/seqkit1\"\n\nmkdir -p \"${SEQKIT}\"\nseqkit stat \"${INPUTDIR}\"/*.fastq.gz >\"${SEQKIT}\"/seqkit_stats.txt"},{"path":"check-raw-reads-statistics.html","id":"fastqc---multiqc-on-raw-reads","chapter":"2 Check Raw Reads Statistics","heading":"2.2 FastQC - MultiQC on raw reads","text":"","code":"\n#!/bin/bash\n\necho PROGRESS: FastQC - Getting quality scores of raw reads.\n\nINPUTDIR=\"resources/reads\"\nFASTQC=\"results/qc/fastqc1\"\nmkdir -p \"${FASTQC}\"\nfastqc \"${INPUTDIR}\"/*.fastq.gz -o \"${FASTQC}\"#!/bin/bash\n\necho PROGRESS: MultiQC - Getting summary of raw read quality scores.\n\nFASTQC=\"results/qc/fastqc1\"\nMULTIQC=\"results/qc/multiqc1\"\nmkdir -p \"${MULTIQC}\"\nmultiqc --force --data-dir \"${FASTQC}\" -o \"${MULTIQC}\" --export"},{"path":"trim-poor-reads.html","id":"trim-poor-reads","chapter":"3 Trim Poor Reads","heading":"3 Trim Poor Reads","text":"","code":""},{"path":"trim-poor-reads.html","id":"bbduk-trimming-poor-reads","chapter":"3 Trim Poor Reads","heading":"3.1 BBDuk trimming poor reads","text":"","code":"#!/bin/bash\n\necho PROGRESS: Read trimming\ncd resources/reads\n\nfor i in `ls -1 *_1.fastq.gz | sed 's/_1.fastq.gz//'`\n  do\n  bbduk.sh -Xmx3g \\\n    in1=$i\\_1.fastq.gz \\\n    in2=$i\\_2.fastq.gz \\\n    out1=trimmed/$i\\_1.fastq.gz \\\n    out2=trimmed/$i\\_2.fastq.gz \\\n    qtrim=r \\\n    trimq=25 \\\n    overwrite=True\n  done"},{"path":"trim-poor-reads.html","id":"fastqc---multiqc-on-trimmed-reads","chapter":"3 Trim Poor Reads","heading":"3.2 FastQC - MultiQC on trimmed reads","text":"","code":"\n#!/bin/bash\n\necho PROGRESS: FastQC - Getting read quality scores of trimmed reads.\n\nINPUTDIR=\"resources/reads/trimmed/\"\nFASTQC=\"results/qc/fastqc2\"\nmkdir -p \"${FASTQC}\"\nfastqc \"${INPUTDIR}\"/*.fastq.gz -o \"${FASTQC}\"#!/bin/bash\n\necho PROGRESS: MultiQC - Getting summary of trimmed read quality scores.\n\nFASTQC=\"results/qc/fastqc2\"\nMULTIQC=\"results/qc/multiqc2\"\nmkdir -p \"${MULTIQC}\"\nmultiqc --force --data-dir \"${FASTQC}\" -o \"${MULTIQC}\" --export"},{"path":"trim-poor-reads.html","id":"seqkit-on-trimmed-reads","chapter":"3 Trim Poor Reads","heading":"3.3 Seqkit on trimmed reads","text":"","code":"\n#!/bin/bash\n\necho PROGRESS: Getting stats of the trimmed reads.\n\nINPUTDIR=\"resources/reads/trimmed\"\nSEQKIT=\"results/qc/seqkit2\"\nmkdir -p \"${SEQKIT}\"\nseqkit stat \"${INPUTDIR}\"/*.fastq.gz >\"${SEQKIT}\"/seqkit_stats.txt"},{"path":"remove-contaminated-reads.html","id":"remove-contaminated-reads","chapter":"4 Remove Contaminated Reads","heading":"4 Remove Contaminated Reads","text":"","code":""},{"path":"remove-contaminated-reads.html","id":"bbduk-read-decontamination","chapter":"4 Remove Contaminated Reads","heading":"4.1 BBDuk read decontamination","text":"","code":"#!/bin/bash\n\necho PROGRESS: Read decontamination\ncd resources/reads/trimmed\n\nfor i in `ls -1 *_1.fastq.gz | sed 's/_1.fastq.gz//'`\n  do\n  bbduk.sh -Xmx3g \\\n    in1=$i\\_1.fastq.gz \\\n    in2=$i\\_2.fastq.gz \\\n    out1=decontam/$i\\_1.fastq.gz \\\n    out2=decontam/$i\\_2.fastq.gz \\\n    outm1=decontam/matchedphix/$i\\_1.fastq.gz \\\n    outm2=decontam/matchedphix/$i\\_2.fastq.gz \\\n    ref=~/bbmap/resources/phix174_ill.ref.fa.gz \\\n    k=25 \\\n    hdist=1 \\\n    overwrite=True\n  done"},{"path":"remove-contaminated-reads.html","id":"fastqc---multiqc-on-decontaminated-reads","chapter":"4 Remove Contaminated Reads","heading":"4.2 FastQC - MultiQC on decontaminated reads","text":"","code":"\n#!/bin/bash\n\necho PROGRESS: FastQC - Getting read quality scores of decontaminated reads.\n\nINPUTDIR=\"resources/reads/trimmed/decontam\"\nFASTQC=\"results/qc/fastqc3\"\nmkdir -p \"${FASTQC}\"\nfastqc \"${INPUTDIR}\"/*.fastq.gz -o \"${FASTQC}\"## Warning in readLines(script_path): incomplete final line found on\n## 'workflow/scripts/multiqc_decontam.sh'#!/bin/bash\n\necho PROGRESS: MultiQC - Getting summary of decontaminated read quality scores.\n\nFASTQC=\"results/qc/fastqc3\"\nMULTIQC=\"results/qc/multiqc3\"\n\nmkdir -p \"${MULTIQC}\"\nmultiqc --force --data-dir \"${FASTQC}\" -o \"${MULTIQC}\" --export"},{"path":"remove-contaminated-reads.html","id":"seqkit-on-decontaminated-reads","chapter":"4 Remove Contaminated Reads","heading":"4.3 Seqkit on decontaminated reads","text":"","code":"#!/bin/bash\n\necho PROGRESS: Getting stats of the decontaminated reads.\n\nINPUTDIR=\"resources/reads/trimmed/decontam\"\nSEQKIT=\"results/qc/seqkit3\"\nmkdir -p \"${SEQKIT}\"\nseqkit stat \"${INPUTDIR}\"/*.fastq.gz >\"${SEQKIT}\"/seqkit_stats.txt"},{"path":"view-processed-read-status.html","id":"view-processed-read-status","chapter":"5 View Processed Read Status","heading":"5 View Processed Read Status","text":"","code":"\nsource(\"workflow/scripts/common.R\")\n\nlibrary(tidyverse, suppressPackageStartupMessages())\nlibrary(ggtext)\n\nstats1 <- read_table(\"results/qc/seqkit1/seqkit_stats.txt\", show_col_types = F) %>% \n  mutate(file = str_replace_all(file, \".*/\", \"\")) %>% \n  mutate(file = str_replace_all(file, \".fastq.gz\", \"\")) %>% \n  select(file, rawreads = num_seqs)\n\nstats2 <- read_table(\"results/qc/seqkit2/seqkit_stats.txt\", show_col_types = F) %>% \n  mutate(file = str_replace_all(file, \".*/\", \"\")) %>% \n  mutate(file = str_replace_all(file, \".fastq.gz\", \"\")) %>% \n  select(file, trimmed = num_seqs)\n\nstats3 <- read_table(\"results/qc/seqkit3/seqkit_stats.txt\", show_col_types = F) %>% \n  mutate(file = str_replace_all(file, \".*/\", \"\")) %>% \n  mutate(file = str_replace_all(file, \".fastq.gz\", \"\")) %>% \n  select(file, decontam = num_seqs) \n\nstats <- inner_join(stats1, stats2, by = \"file\") %>% \n  inner_join(., stats3, by = \"file\") %>%\n  pivot_longer(-file, names_to = \"variable\", values_to = \"count\") %>%\n  mutate(variable = factor(variable, \n         levels = c(\"rawreads\", \"trimmed\", \"decontam\"))) \n\nstats %>% \n  ggplot(aes(x = fct_inorder(file), y = count/1E3, fill = variable)) +  \n  theme_cdi() +\n  geom_col(position = \"dodge\") +\n  labs(x = \"Sample\", y = \"Number of Reads (X1000)\", fill = \"Color Code\") +\n  scale_y_continuous(expand = c(0.02, 0.0))\n\nggsave(file=\"figures/samples_hist.png\", width=5, height=5)\nggsave(file=\"figures/samples_hist.svg\", width=5, height=5)\n\n\nstats %>% \n  ggplot(aes(x = fct_inorder(variable), y = count/1E3, fill = variable)) +  \n  theme_classic() +\n  geom_col(position = \"dodge\") +\n  labs(x = \"Processed Read\", y = \"Number of Reads (X500)\", fill = \"Color Code\") +\n  scale_y_continuous(expand = c(0.02, 0.0))\n\nggsave(file=\"figures/qc_hist.png\", width=5, height=5)\nggsave(file=\"figures/qc_hist.svg\", width=5, height=5)"},{"path":"imap-github-repos.html","id":"imap-github-repos","chapter":"A IMAP GitHub Repos","heading":"A IMAP GitHub Repos","text":"","code":""},{"path":"read-qc-rulegraph.html","id":"read-qc-rulegraph","chapter":"B Read QC Rulegraph","heading":"B Read QC Rulegraph","text":"","code":""},{"path":"session-information.html","id":"session-information","chapter":"C Session Information","heading":"C Session Information","text":"Reproducibility relies ability precisely recreate working environment, session information serves vital reference achieve consistency. record details R environment, package versions, system settings computing environment time analysis.detailed overview tools versions suitable guide, encourage explore session information saved accompanying text file named session_info.txt,","code":"\nlibrary(knitr)\nlibrary(sessioninfo)\n\n# Get session info\ninfo <- capture.output(print(session_info()))\n\n# Create the 'resources' folder if it doesn't exist\nif (!dir.exists(\"resources\")) {\n  dir.create(\"resources\")\n}\n\n# Save the session information to a text file without line numbers\ncat(info, file = \"session_info.txt\", sep = \"\\n\")"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"Last updated February 18, 2024.\nGithub_Repo: https://github.com/datainsights/imap-project-overview\nRepo compiled maintained : Teresia Mrema-Buza.\nrelated info, visit CDI website (…progress).","code":""}]
